diff --git a/index-management/src/main/java/com/cmri/um/he/index/controller/AppQualityController.java b/index-management/src/main/java/com/cmri/um/he/index/controller/AppQualityController.java
new file mode 100644
index 0000000..bc51ed7
--- /dev/null
+++ b/index-management/src/main/java/com/cmri/um/he/index/controller/AppQualityController.java
@@ -0,0 +1,63 @@
+package com.cmri.um.he.index.controller;
+
+import com.cmri.spring.common.controller.ZRestController;
+import com.cmri.spring.common.data.ResponseMessage;
+import com.cmri.um.he.index.service.AppQualityService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.CrossOrigin;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.List;
+
+/**
+ * 查询未计算体验指数的所有应用，计算应用的品质总分
+ * @author machao
+ * Created on 2018/6/28
+ */
+@RestController
+@CrossOrigin
+public class AppQualityController extends ZRestController {
+
+    @Autowired
+    AppQualityService appQualityService;
+
+    /**
+     * 查询所有未计算品质得分的应用
+     * @return
+     */
+    @RequestMapping(value = "/app-quality-qindex-list",method = RequestMethod.GET)
+    public ResponseMessage getQualityList() {
+
+        List resultList = appQualityService.quary();
+        ResponseMessage responseMessage = this.genResponseMessage();
+        if(resultList!=null && resultList.size()!=0){
+            responseMessage.set("qualityList",resultList);
+        }else {
+            responseMessage.setMsg("没有需要处理数据！！！");
+        }
+        return responseMessage;
+    }
+
+    /**
+     * 计算应用的品质得分并存入数据库
+     * @return
+     */
+    @RequestMapping(value = "/app-quality-qindex",method = RequestMethod.GET)
+    public ResponseMessage setQindex(){
+        List quaryList = appQualityService.quary();
+        ResponseMessage responseMessage = this.genResponseMessage();
+        if(quaryList!=null && quaryList.size()!=0){
+            boolean b = appQualityService.setQindex(quaryList);
+            if (b){
+                responseMessage.setMsg("处理成功！");
+            }else {
+                responseMessage.setMsg("处理失败！");
+            }
+        }else {
+            return responseMessage.setMsg("没有需要处理数据！！！");
+        }
+        return responseMessage;
+    }
+}
diff --git a/index-management/src/main/java/com/cmri/um/he/index/dao/AppQualityDao.java b/index-management/src/main/java/com/cmri/um/he/index/dao/AppQualityDao.java
new file mode 100644
index 0000000..8889a19
--- /dev/null
+++ b/index-management/src/main/java/com/cmri/um/he/index/dao/AppQualityDao.java
@@ -0,0 +1,41 @@
+package com.cmri.um.he.index.dao;
+
+import com.cmri.um.he.index.entity.AppQualityEntity;
+import com.cmri.um.he.index.mapper.AppQualityMapper;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 查询未计算体验指数的所有应用，计算应用的品质总分
+ * @author machao
+ * Created on 2018/6/28
+ */
+@Repository
+public class AppQualityDao extends BaseDao {
+    @Autowired
+    private AppQualityMapper appQualityMapper;
+
+    /**
+     * 根据qindex是否为null查询所有未计算的应用
+     */
+    public List<Map<String, Object>> quaryQualityList(){
+        return appQualityMapper.quaryQualityList();
+    }
+
+
+    /**
+     * 将计算好的应用品质得分存入数据库
+     * @param app
+     * @param version
+     * @param month
+     * @param qindex
+     * @return
+     */
+    public int setQindex(int app,String version,String month,double qindex){
+        return appQualityMapper.setQindex(app,version,month,qindex);
+    }
+
+}
diff --git a/index-management/src/main/java/com/cmri/um/he/index/dao/AppWeightQualityDao.java b/index-management/src/main/java/com/cmri/um/he/index/dao/AppWeightQualityDao.java
index bd4a8d5..25b75b7 100644
--- a/index-management/src/main/java/com/cmri/um/he/index/dao/AppWeightQualityDao.java
+++ b/index-management/src/main/java/com/cmri/um/he/index/dao/AppWeightQualityDao.java
@@ -18,4 +18,8 @@ public class AppWeightQualityDao {
     public AppWeightQualityEntity findQualityConfig(int category){
         return mapper.findQualityConfig(category);
     }
+
+    public AppWeightQualityEntity getWeight(int category){
+        return mapper.getWeight(category);
+    }
 }
diff --git a/index-management/src/main/java/com/cmri/um/he/index/mapper/AppQualityMapper.java b/index-management/src/main/java/com/cmri/um/he/index/mapper/AppQualityMapper.java
new file mode 100644
index 0000000..91010c4
--- /dev/null
+++ b/index-management/src/main/java/com/cmri/um/he/index/mapper/AppQualityMapper.java
@@ -0,0 +1,40 @@
+package com.cmri.um.he.index.mapper;
+
+import com.cmri.um.he.index.entity.AppQualityEntity;
+import org.apache.ibatis.annotations.Mapper;
+import org.apache.ibatis.annotations.Param;
+import org.apache.ibatis.annotations.Select;
+import org.apache.ibatis.annotations.Update;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 查询未计算体验指数的所有应用，计算应用的品质总分
+ * @author machao
+ * Created on 2018/6/28
+ */
+@Mapper
+public interface AppQualityMapper {
+
+    /**
+     * 根据qindex是否为null查询所有计算的应用计算值数据的方法
+     * @return
+     */
+    @Select("SELECT ai.`name` as name,aq.`app` as app,aq.`category` as category,aq.`features` as features,aq.`views` as views,aq.`delay` as delay,aq.`consume` as consume,aq.`experience` as experience,aq.`version` as version,aq.`month`AS month,aq.`qindex`AS qindex\n" +
+            "FROM app_info AS ai JOIN app_quality AS aq ON ai.`id`=aq.`app` \n" +
+            "WHERE aq.`qindex` IS NULL")
+    List<Map<String, Object>> quaryQualityList();
+
+
+    /**
+     * 将计算好的应用品质得分存入数据库
+     * @param app
+     * @param version
+     * @param month
+     * @param qindex
+     * @return
+     */
+    @Update("UPDATE app_quality SET qindex = #{qindex} WHERE app=#{app} AND VERSION = #{version} AND month=#{month}")
+    int setQindex(@Param("app") int app,@Param("version")String version,@Param("month")String month,@Param("qindex")double qindex);
+}
diff --git a/index-management/src/main/java/com/cmri/um/he/index/mapper/AppWeightQualityMapper.java b/index-management/src/main/java/com/cmri/um/he/index/mapper/AppWeightQualityMapper.java
index f0022ab..d8c5ea0 100644
--- a/index-management/src/main/java/com/cmri/um/he/index/mapper/AppWeightQualityMapper.java
+++ b/index-management/src/main/java/com/cmri/um/he/index/mapper/AppWeightQualityMapper.java
@@ -19,4 +19,12 @@ public interface AppWeightQualityMapper {
      */
     @Select("SELECT * FROM app_weight_quality where category=#{category}")
     AppWeightQualityEntity findQualityConfig(int category);
+
+    /**
+     * 根据应用类型查询维度权重
+     * @param category
+     * @return
+     */
+    @Select("SELECT wfeatures,wview,wdelay,wconsume,wexperience FROM app_weight_quality WHERE category=#{category}")
+    AppWeightQualityEntity getWeight(int category);
 }
diff --git a/index-management/src/main/java/com/cmri/um/he/index/service/AppQualityService.java b/index-management/src/main/java/com/cmri/um/he/index/service/AppQualityService.java
new file mode 100644
index 0000000..346b58f
--- /dev/null
+++ b/index-management/src/main/java/com/cmri/um/he/index/service/AppQualityService.java
@@ -0,0 +1,29 @@
+package com.cmri.um.he.index.service;
+
+import com.cmri.spring.common.data.PagingData;
+import com.cmri.um.he.index.entity.AppQualityEntity;
+
+import java.util.List;
+import java.util.Map;
+
+
+/**
+ * 查询未计算体验指数的所有应用，计算应用的品质总分
+ *
+ * @author machao
+ * Created on 2018/6/28
+ */
+public interface AppQualityService {
+    /**
+     * 查询所有未计算的应用
+     * @return
+     */
+    public List<Map<String, Object>> quary();
+
+    /**
+     * 计算应用的品质得分并粗如数据库
+     * @param qualityEntityList
+     * @return
+     */
+    public boolean setQindex(List<Map<String, Object>> qualityEntityList);
+}
diff --git a/index-management/src/main/java/com/cmri/um/he/index/service/impl/AppQualityServiceImpl.java b/index-management/src/main/java/com/cmri/um/he/index/service/impl/AppQualityServiceImpl.java
new file mode 100644
index 0000000..204c62e
--- /dev/null
+++ b/index-management/src/main/java/com/cmri/um/he/index/service/impl/AppQualityServiceImpl.java
@@ -0,0 +1,74 @@
+package com.cmri.um.he.index.service.impl;
+
+import com.cmri.um.he.index.dao.AppQualityDao;
+import com.cmri.um.he.index.dao.AppWeightQualityDao;
+import com.cmri.um.he.index.entity.AppQualityEntity;
+import com.cmri.um.he.index.entity.AppWeightQualityEntity;
+import com.cmri.um.he.index.service.AppQualityService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+
+import java.text.DecimalFormat;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 查询未计算体验指数的所有应用，计算应用的品质总分
+ * @author machao
+ * Created on 2018/6/28
+ */
+@Service
+public class AppQualityServiceImpl implements AppQualityService {
+
+    @Autowired
+    AppQualityDao appQualityDao;
+
+    @Autowired
+    AppWeightQualityDao appWeightQualityDao;
+
+    private final static DecimalFormat DF=new DecimalFormat("#,##0.00");
+
+    /**
+     * 查询未计算的应用
+     * @return
+     */
+    @Override
+    public List<Map<String, Object>> quary() {
+
+        return appQualityDao.quaryQualityList();
+    }
+
+    /**
+     * 计算应用的品质得分并存入数据库
+     * @param qualityEntityList
+     * @return
+     */
+    @Override
+    public boolean setQindex(List<Map<String, Object>> qualityEntityList) {
+        double qindex=0;
+        try {
+            for (Map<String, Object> appQualityEntity : qualityEntityList) {
+
+                AppWeightQualityEntity appWeightQualityEntity = appWeightQualityDao.getWeight((int)appQualityEntity.get("category"));
+                double feature = appWeightQualityEntity.getWfeatures();
+                double view = appWeightQualityEntity.getWview();
+                double delay = appWeightQualityEntity.getWdelay();
+                double consume = appWeightQualityEntity.getWconsume();
+                double experience = appWeightQualityEntity.getWexperience();
+
+                //APP品质总得分=Σ（各维度品质标准值*该维度权重）
+                qindex = (double)appQualityEntity.get("features")*feature+(double)appQualityEntity.get("views")*view+(double)appQualityEntity.get("delay")*delay+(double)appQualityEntity.get("consume")*consume+(double)appQualityEntity.get("experience")*experience;;
+                String qindex1 = DF.format(qindex);
+                qindex = Double.valueOf(qindex1);
+                int i = appQualityDao.setQindex((int)appQualityEntity.get("app"), (String) appQualityEntity.get("version"), (String) appQualityEntity.get("month"), qindex);
+
+            }
+            return true;
+        }catch (Exception e){
+            return false;
+        }
+
+    }
+
+}
